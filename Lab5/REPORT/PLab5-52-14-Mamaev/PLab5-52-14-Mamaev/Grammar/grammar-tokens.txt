<statement-list>            := <statement> <statement-list-tail> | e

<statement-list-tail>       := <statement> <statement-list-tail> | e

<statement>                 := <expression-statement> | <assignment-statement> | <while-statement> | <if-else-statement> | <for-statement> | <function-declaration> | LEFT_CURLY <statement-list> RIGHT_CURLY | SEMICOLON

<expression-statement>      := <expression> SEMICOLON

<expression>                := <primary-expr> | <postfix-expr> | <prefix-expr> | <unary-expr> | <binary-expr> | <assignment-expr> | <ternary-expr> | <object-literal> | <array-literal>

<primary-expr>              := <object-accessor> | <literal> | LEFT_ROUND <expression> RIGHT_ROUND

<object-accessor>           := IDENTIFIER <object-accessor-tail>

<object-accessor-tail>      := LEFT_SQUARE <expression> RIGHT_SQUARE <object-accessor-tail> | POINT <object-accessor> | LEFT_ROUND <method-argument-list> <object-accessor-tail> | e

<method-argument-list>      := <argument> <argument-list-tail> | RIGHT_ROUND

<method-argument-list-tail> := COMMA <argument> <argument-list> | RIGHT_ROUND

<method-argument>           := IDENTIFIER <argument-tail>

<literal>                   := STRING | NULL_LITERAL | BOOLEAN | NUMERIC | REGEXP

<postfix-expr>              := <object-accessor> | <object-accessor> <doubled-op>

<prefix-expr>               := OP_DOUBLED <object-accessor> | <object-accessor>

<doubled-op>                := OP_DOUBLED

<unary-expr>                := <unary-op> <primary-expr>

<unary-op>                  := OP_ADDITIVE | OP_EXCLAMATION

<binary-expr>               := <primary-expr> <binary-op> <expression>

<binary-op>                 := OP_ADDITIVE | OP_BINARY

<assignment-expr>           := <assignment> | <assignment> COMMA <assignment-expr>

<assignment>                := <object-accessor> <assignment-op> <expression> | <object-accessor> = <function-declaration>

<assignment-op>             := OP_ASSIGN

<ternary-expr>              := <primary-expr> QUESTION <primary-expr> COLON <primary-expr>

<object-literal>            := LEFT_CURLY <object-key-value-list>

<object-key-value-list>     := <object-key-value> <object-key-value-list-tail> | RIGHT_CURLY

<object-key-value-list-tail> := COMMA <object-key-value> <object-key-value-list-tail> | RIGHT_CURLY

<object-key-value>          := STRING : <expression> | IDENTIFIER : <expression>

<array-literal>             := LEFT_SQUARE <array-element-list>

<array-element-list>        := <expression> <array-element-list-tail> | RIGHT_SQUARE

<array-element-list-tail>   := COMMA <expression> <array-element-list-tail> | RIGHT_SQUARE

<assignment-statement>      := VAR <assignment-expr> SEMICOLON | LET <assignment-expr> SEMICOLON | CONST <assignment-expr> SEMICOLON

<function-declaration>      := function LEFT_ROUND <argument-list> <function-body>

<argument-list>             := <argument> <argument-list-tail> | RIGHT_ROUND

<argument-list-tail>        := COMMA <argument> <argument-list> | RIGHT_ROUND

<argument>                  := IDENTIFIER <argument-tail>

<argument-tail>             := OP_EQUAL <expression> | e

<function-body>             := LEFT_CURLY <func-body-statement-list> | <func-body-statement>

<func-body-statement-list>  := <func-body-statement> <func-body-statement-list-tail> | RIGHT_CURLY

<func-body-statement>       := <statement> | return <expression> SEMICOLON

<while-statement>           := WHILE LEFT_ROUND <expression> RIGHT_ROUND <loop-body>

<for-statement>             := FOR LEFT_ROUND <expression> SEMICOLON <expression> SEMICOLON <expression> RIGHT_ROUND <loop-body>

<loop-body>                 := LEFT_CURLY <loop-body-statement-list> | <loop-body-statement>

<loop-body-statement-list>  := <loop-body-statement> <loop-body-statement-list-tail> | RIGHT_CURLY

<loop-body-statement>       := BREAK SEMICOLON | CONTINUE SEMICOLON | <statement>

<if-else-statement>         := <if-statement> <else-statement-list>

<if-statement>              := IF LEFT_ROUND <expression> RIGHT_ROUND <if-body>

<else-statement-list>       := ELSE <if-statement> <else-statement-list> | ELSE <if-body> | e

<if-body>                   := LEFT_CURLY <if-body-statement-list> | <if-body-statement>

<if-body-statement-list>    := <if-body-statement> <if-body-statement-list> | RIGHT_CURLY

<if-body-statement>         := <statement> | BREAK SEMICOLON