<statement-list>        := <statement> <statement-list-tail> | empty

<statement-list-tail>   := <statement> <statement-list-tail> | empty

<statement>             := <expression-statement> | <assignment-statement> | <while-statement> | <if-else-statement> | <for-statement> | <function-declaration> | { <statement-list> } | ;

<expression-statement>  := <expression> ;

<expression>            := <primary-expr> | <postfix-expr> | <prefix-expr> | <unary-expr> | <binary-expr> | <assignment-expr> | <ternary-expr> | <object-literal> | <array-literal>

<primary-expr>          := <object-accessor> | <literal> | ( <expression> )

<object-accessor>       := IDENTIFIER <object-accessor-tail>

<object-accessor-tail>  := [ <expression> ] | . <object-accessor> <object-complex-tail> | empty

<object-complex-tail>   := [ <expression> ] | empty

<literal>               := STRING | NULL_LITERAL | BOOLEAN | NUMERIC | REGEXP

<postfix-expr>          := <object-accessor> | <object-accessor> ++ | <object-accessor> --

<prefix-expr>           := <object-accessor> | ++ <object-accessor> | -- <object-accessor>

<unary-expr>            := <unary-op> <primary-expr>

<unary-op>              := - | + | !

<binary-expr>           := <primary-expr> <binary-op> <expression>

<binary-op>             := === | !== | <= | >= | == | != | << | >> | && | || | < | > | + | - | * | / | %

<assignment-expr>       := <assignment> | <assignment> , <assignment-expr>

<assignment>            := <object-accessor> <assignment-op> <expression> | <object-accessor> = <function-declaration>

<assignment-op>         := += | -= | *= | %= | &= | |= | ^= | =

<ternary-expr>          := <primary-expr> ? <primary-expr> : <primary-expr>

<object-literal>        := { } | { <object-key-value-list> }

<object-key-value-list> := <object-key-value> <object-key-value-list-tail>

<object-key-value-list-tail> := , <object-key-value> <object-key-value-list-tail> | empty

<object-key-value>      := STRING : <expression> | IDENTIFIER : <expression>

<array-literal>         := [ ] | [ <array-element-list> ]

<array-element-list>    := <expression> <array-element-list-tail>

<array-element-list-tail> := , <expression> <array-element-list-tail> | empty

<assignment-statement>  := var <assignment-expr> ;

<function-declaration>  := function ( <argument-list> ) <function-body>

<argument-list>         := <argument> <argument-list-tail>

<argument-list-tail>    := , <argument> <argument-list> | empty

<argument>              := IDENTIFIER | IDENTIFIER = <expression>

<function-body>         := { <func-body-statement-list> } | <func-body-statement>

<func-body-statement-list>  := <func-body-statement> <func-body-statement-list-tail>

<func-body-statement-list-tail> := , <func-body-statement> <func-body-statement-list-tail> | empty

<func-body-statement>       := <statement> | return <expression> ;

<while-statement>       := while ( <expression> ) <loop-body>

<for-statement>         := for ( <expression> ; <expression> ; <expression> ) <loop-body>

<loop-body>             := { <loop-body-statement-list> } | <loop-body-statement>

<loop-body-statement-list>  := <loop-body-statement> <loop-body-statement-list-tail>

<loop-body-statement-list-tail> := <loop-body-statement> <loop-body-statement-list-tail> | empty

<loop-body-statement>       := break ; | continue ; | <statement>

<if-else-statement>     := <if-statement> <else-statement-list>

<if-statement>          := if ( <expression> ) <if-body>

<else-statement-list>   := else <if-statement> <else-statement-list> | empty

<if-body>               := { <if-body-statement-list> } | <if-body-statement>

<if-body-statement-list>    := <if-body-statement> <if-body-statement-list-tail>

<if-body-statement-list-tail> := <if-body-statement> <if-body-statement-list-tail> | empty

<if-body-statement>         := <statement> | break ;